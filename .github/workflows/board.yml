# This is intended to be called in any of our repos.
# To use you can look at `add-to-board.yml` as a reference.
# You should be able to just call `uses: newrelic/node-newrelic/.github/workflows/board.yml@main`
# If for some reason the "todo" or "needs pr" columns are different than the default, you can pass in
# via
# with:
#   todo_column: 'TODO Column'
#   pr_column: 'PR Column'
#
# If you do not want to add to the Node.js Engineering Board, you'll have to find the guid of the project
# by using the GitHub API
# `gh api -H "Accept: application/vnd.github.inertia-preview+json" orgs/newrelic/projects --jq ".[] | select(.name == \"<Name of Boarda>"\").id"`
#
# You can find a project via `orgs/newrelic/projects`, `repos/newrelic/<repo-name>/projects`

name: Add Issues/PRs to project board
on:
  workflow_call:
    inputs:
      project_id:
        description: Id of Project in GitHub
        default: 105 # Node.js Engineering Board https://github.com/orgs/newrelic/projects/105 
        required: false
        type: number 
      todo_column:
        description: Name of the To-Do column in project
        default: 'Triage Needed: Unprioritized Features'
        required: false
        type: string
      pr_column:
        description: Name of the In Review column in project
        default: 'Needs PR Review'
        required: false
        type: string
    # Cannot rely on environment secrets(i.e. from node-newrelic settings)
    # in a reusable workflow.  We must pass it in, see add-to-board.yml
    # See: https://github.community/t/reusable-workflows-secrets-and-environments/203695/4
    secrets:
      gh_token:
        description: Token used to make gh api calls, must have org level perms
        required: true

jobs:
  assign_to_project:
    if: github.event_name == 'pull_request_target' || github.event_name == 'issues'
    env:
      # Cannot use `secrets.GITHUB_TOKEN` because the project board
      # exists at org level. You cannot add permissions outside the scope
      # of the given repo
      GITHUB_TOKEN: ${{ secrets.gh_token }}
      PROJECT_ID: ${{ inputs.project_id }}
      TODO_COL_NAME: ${{ inputs.todo_column}}
      PR_COL_NAME: ${{ inputs.pr_column }}
    runs-on: ubuntu-latest
    name: Assign Issues and/or PRs to Project
    steps:
    - name: Get project information
      run: |
          gh api graphql -f query='
            query($org: String!, $number: Int!) {
              organization(login: $org){
                projectV2(number: $number) {
                  id
                  fields(first:20) {
                    nodes {
                      ... on ProjectV2Field {
                        id
                        name
                      }
                      ... on ProjectV2SingleSelectField {
                        id
                        name
                        options {
                          id
                          name
                        }
                      }
                    }
                  }
                }
              }
            }' -f org=newrelic -F number=$PROJECT_ID > project_data.json
          # Save the values of project id, status field id and the todo and needs pr column ids
          echo 'PROJECT_ID='$(jq '.data.organization.projectV2.id' project_data.json) >> $GITHUB_ENV
          echo 'DATE_FIELD_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Date created") | .id' project_data.json) >> $GITHUB_ENV
          echo 'STATUS_FIELD_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Status") | .id' project_data.json) >> $GITHUB_ENV
          echo 'TODO_OPTION_ID='$(jq -r --arg TODO_COL_NAME "$TODO_COL_NAME" '.data.organization.projectV2.fields.nodes[] | select(.name== "Status") | .options[] | select(.name==$TODO_COL_NAME) |.id' project_data.json) >> $GITHUB_ENV
          echo 'PR_OPTION_ID='$(jq -r --arg PR_COL_NAME "$PR_COL_NAME" '.data.organization.projectV2.fields.nodes[] | select(.name== "Status") | .options[] | select(.name==$PR_COL_NAME) |.id' project_data.json) >> $GITHUB_ENV
          echo 'DATE='$(date +"%Y-%m-%d") >> $GITHUB_ENV
    - name: Assign Issue/PR to Project
      run: |
        # Add Issue/PR to board depending on event type
        item_id="$( gh api graphql -f query='
          mutation($project:ID!, $id:ID!) {
            addProjectV2ItemById(input: {projectId: $project, contentId: $id}) {
              item {
                id
              }
            }
          }' -f project=$PROJECT_ID -f id=$ISSUE_OR_PR_ID --jq '.data.addProjectV2ItemById.item.id')"
          # Update the status to Triage Needed/Needs PR Review depending on event type
          # and update the date so it shows on top of column
          gh api graphql -f query='
            mutation (
              $project: ID!
              $item: ID!
              $status_field: ID!
              $status_value: String!
              $date_field: ID!
              $date_value: Date!
            ) {
              set_status: updateProjectV2ItemFieldValue(input: {
                projectId: $project
                itemId: $item
                fieldId: $status_field
                value: {
                  singleSelectOptionId: $status_value
                  }
              }) {
                projectV2Item {
                  id
                  }
              }
              set_date_posted: updateProjectV2ItemFieldValue(input: {
                projectId: $project
                itemId: $item
                fieldId: $date_field
                value: {
                  date: $date_value
                }
              }) {
                projectV2Item {
                  id
                }
              }
            }' -f project=$PROJECT_ID -f item=$item_id -f status_field=$STATUS_FIELD_ID -f status_value=${{ github.event_name == 'pull_request_target' && env.PR_OPTION_ID || env.TODO_OPTION_ID }} -f date_field=$DATE_FIELD_ID -f date_value=$DATE --silent
      env:
        ISSUE_OR_PR_ID: ${{ github.event_name == 'pull_request_target' && github.event.pull_request.node_id || github.event.issue.node_id }}
